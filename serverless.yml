service: webshop

custom:
  productsTableName: 'products-${self:provider.stage}'
  ordersTableName: 'orders-${self:provider.stage}'
  accountId: !Ref AWS::AccountId

plugins:
  - serverless-offline-python

provider:
  name: aws
  runtime: python3.8
  environment:
    PRODUCTS_TABLE: ${self:custom.productsTableName}
    ORDERS_TABLE: ${self:custom.ordersTableName}
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    SERVICE: ${self:service}
    ACCOUNT_ID: ${self:custom.accountId}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}"

functions:
  create-product:
    handler: src/functions/product/create_product.create_product
    events:
      - http:
          path: api/products
          method: post
          cors: true
  list-products:
    handler: src/functions/product/list_products.list_products
    events:
      - http:
          path: api/products
          method: get
          cors: true
  get-product:
    handler: src/functions/product/get_product.get_product
    events:
      - http:
          path: api/products/{id}
          method: get
          cors: true
  delete-product:
    handler: src/functions/product/delete_product.delete_product
    events:
      - http:
          path: api/products/{id}
          method: delete
          cors: true

  create-order:
    handler: src/functions/order/create_order.create_order
    events:
      - http:
          path: api/orders
          method: post
          cors: true
  list-orders:
    handler: src/functions/order/list_orders.list_orders
    events:
      - http:
          path: api/orders
          method: get
          cors: true
  get-order:
    handler: src/functions/order/get_order.get_order
    events:
      - http:
          path: api/orders/{id}
          method: get
          cors: true
  delete-order:
    handler: src/functions/order/delete_order.delete_order
    events:
      - http:
          path: api/orders/{id}
          method: delete
          cors: true


resources:
  Resources:
    ProductsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
    OrdersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ORDERS_TABLE}