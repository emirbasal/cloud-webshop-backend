service: webshop-backend

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-autoscaling
#  - serverless-vpc-plugin

package:
  individually: true
  exclude:
    - 'venv/**'
    - '.serverless/**'
    - '.idea/**'
    - 'node_modules/**'
    - 'package-lock.json'
    - '.gitlab-ci.yml'
    - '.gitignore'
    - 'src/**'
  include:
    - src/main/helper/**

custom:
  productsTableName: 'webshop-products-${self:provider.stage}'
  ordersTableName: 'webshop-orders-${self:provider.stage}'
  usersTableName: 'webshop-users-${self:provider.stage}'
  accountId: !Ref AWS::AccountId
  pythonRequirements:
    dockerizePip: true
    useDownloadCache: true
    useStaticCache: true
    cacheLocation: ./.serverless/.requirements_cache

  capacities:
    - table: ProductsDynamoDbTable
      read:
        minimum: 5
        maximum: 40000
        usage: 0.70
      write:
        minimum: 5
        maximum: 40000
        usage: 0.70
    - table: OrdersDynamoDbTable
      read:
        minimum: 5
        maximum: 40000
        usage: 0.70
      write:
        minimum: 5
        maximum: 40000
        usage: 0.70

#  vpcConfig:
#    cidrBlock: '10.0.0.0/16'
#
#    # if createNatGateway is a boolean "true", a NAT Gateway and EIP will be provisioned in each zone
#    # if createNatGateway is a number, that number of NAT Gateways will be provisioned
#    createNatGateway: true
#
#    # When enabled, the DB subnet will only be accessible from the Application subnet
#    # Both the Public and Application subnets will be accessible from 0.0.0.0/0
#    createNetworkAcl: true
#
#    # Whether to create the DB subnet
#    createDbSubnet: true
#
#    # Whether to enable VPC flow logging to an S3 bucket
#    createFlowLogs: true
#
#    # Whether to create a bastion host
#    createBastionHost: false
#
#    # Whether to create a NAT instance
#    createNatInstance: false
#
#    # Whether to create AWS Systems Manager (SSM) Parameters
#    createParameters: false
#
#    # Optionally specify subnet groups to create. If not provided, subnet groups
#    # for RDS, Redshift, ElasticCache and DAX will be provisioned.
#    subnetGroups:
#      - rds
#
#    # Whether to export stack outputs so it may be consumed by other stacks
#    exportOutputs: true

provider:
  name: aws
  runtime: python3.8
  timeout: 30
  memorySize: 2048
  stage: prod
  region: eu-central-1
  tracing:
    apiGateway: true
    lambda: true
  environment:
    PRODUCTS_TABLE: ${self:custom.productsTableName}
    ORDERS_TABLE: ${self:custom.ordersTableName}
    USERS_TABLE: ${self:custom.usersTableName}
    REGION: ${self:provider.region}
    STAGE: ${self:provider.stage}
    SERVICE: ${self:service}
    ACCOUNT_ID: ${self:custom.accountId}
    PAYMENT_API: 'https://c4.ebke.hmcloudlabs.de/payment'
    PAYMENT_API_KEY: 'YfPE0IdT0HL0'
    SNS_TOPIC_PUBLISH: 'arn:aws:sns:eu-central-1:745170541333:foobar-gmbh-lagerhaltung-anfragen'
    SNS_TOPIC_RECEIVE: 'arn:aws:sns:eu-central-1:745170541333:foobar-gmbh-lagerhaltung-antworten'
    JWT_SECRET: 'secret'
    JWT_ALGORITHM: 'HS256'
    JWT_EXP_SECONDS: 300
    FRONTEND_ORIGIN: 'https://d2emmlz3725wm2.cloudfront.net'
    SHOP_CURRENCY: 'EUR'

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PRODUCTS_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORDERS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:GetItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "SNS:Publish"
      Resource: "arn:aws:sns:eu-central-1:745170541333:foobar-gmbh-lagerhaltung-anfragen"

functions:
  create-product:
    handler: src/main/functions/product/create_product.create_product
    events:
      - http:
          path: api/products
          method: post
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/product/create_product.py

  list-products:
    handler: src/main/functions/product/list_products.list_products
    events:
      - http:
          path: api/products
          method: get
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/product/list_products.py

  get-product:
    handler: src/main/functions/product/get_product.get_product
    events:
      - http:
          path: api/products/{id}
          method: get
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/product/get_product.py

  delete-product:
    handler: src/main/functions/product/delete_product.delete_product
    events:
      - http:
          path: api/products/{id}
          method: delete
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/product/delete_product.py

  create-order:
    handler: src/main/functions/order/create_order.create_order
    events:
      - http:
          path: api/orders
          method: post
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/order/create_order.py

  list-orders:
    handler: src/main/functions/order/list_orders.list_orders
    events:
      - http:
          path: api/orders
          method: get
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/order/list_orders.py

  get-order:
    handler: src/main/functions/order/get_order.get_order
    events:
      - http:
          path: api/orders/{id}
          method: get
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/order/get_order.py

  delete-order:
    handler: src/main/functions/order/delete_order.delete_order
    events:
      - http:
          path: api/orders/{id}
          method: delete
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/order/delete_order.py

  payment:
    handler: src/main/functions/order/payment.payment
    package:
      include:
        - src/main/functions/order/payment.py

  authenticate:
    handler: src/main/functions/authentication/auth.auth_user
    events:
      - http:
          path: api/auth
          method: post
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/authentication/auth.py

  outcome:
    handler: src/main/functions/management/outcome.outcome
    events:
      - http:
          path: api/management/outcome
          method: get
          cors:
            origin: ${self:provider.environment.FRONTEND_ORIGIN}
    package:
      include:
        - src/main/functions/management/outcome.py

  delivery-publish:
    handler: src/main/functions/order/delivery_publish.delivery_publish
    package:
      include:
        - src/main/functions/order/delivery_publish.py

  delivery-subscribed:
    handler: src/main/functions/order/delivery_subscribed.save_status_to_order
    events:
      - sns: ${self:provider.environment.SNS_TOPIC_RECEIVE}
    package:
      include:
        - src/main/functions/order/delivery_subscribed.py

resources:
  Resources:
    ProductsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PRODUCTS_TABLE}
    OrdersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ORDERS_TABLE}
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USERS_TABLE}